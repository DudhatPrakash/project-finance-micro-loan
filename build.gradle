import java.nio.file.Files

buildscript {

    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordareleasegroup")
        corda_release_version = constants.getProperty("cordareleaseversion")
        corda_gradle_plugins_version = constants.getProperty("cordagradlepluginsversion")
        kotlin_version = constants.getProperty("kotlinversion")
        junit_version = constants.getProperty("junitversion")
        quasar_version = constants.getProperty("quasarversion")
        jolokia_version = constants.getProperty("jolokiaversion")
        slf4j_version = constants.getProperty("slf4jversion")
        log4j_version = constants.getProperty("log4jversion")
        min_platform_version = constants.getProperty("minplatformversion")
        target_platform_version = constants.getProperty("targetplatformversion")
        corda_bn_release_group = constants.getProperty("cordabnreleasegroup")
        corda_bn_release_version = constants.getProperty("cordabnreleaseversion")
        first_module = constants.getProperty("firstmodule")
        secound_module = constants.getProperty("secoundmodule")
        project_contracts = constants.getProperty("projectcontracts")
        project_commons = constants.getProperty("projectcommons")
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://software.r3.com/artifactory/corda-releases' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

allprojects {
    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'kotlin'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-solutions-releases' }
        maven { url 'https://jitpack.io' }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    group = "$project.group"
    version = "$project.version"

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'jacoco'

sourceSets {
    main {
        resources {
            srcDir "config/dev"
        }
    }
    test {
        resources {
            srcDir "config/test"
        }
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"

    // Corda integration dependencies
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaCompile "$corda_release_group:corda-confidential-identities:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    cordaDriver "net.corda:corda-shell:4.9"
    //Finance cordapp.
    cordaCompile "$corda_release_group:corda-finance-workflows:$corda_release_version"
    cordaCompile "$corda_release_group:corda-finance-contracts:$corda_release_version"
    //Business Network Membership.
    cordaCompile "$corda_bn_release_group:business-networks-contracts:$corda_bn_release_version"
    cordaCompile "$corda_bn_release_group:business-networks-workflows:$corda_bn_release_version"
    //PostgreSQL JDBC driver.
    compileOnly('org.postgresql:postgresql:42.1.4')

    //node driver for testing.
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"

    // Specify your dependent CorDapps.
    cordapp project(":$project_contracts")
    cordapp project(":$project_commons")
    cordapp project(":$first_module")
    cordapp project(":$secound_module")
    cordapp "$corda_release_group:corda-finance-workflows:$corda_release_version"
    cordapp "$corda_release_group:corda-finance-contracts:$corda_release_version"
    cordapp "$corda_bn_release_group:business-networks-contracts:$corda_bn_release_version"
    cordapp "$corda_bn_release_group:business-networks-workflows:$corda_bn_release_version"

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"

}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

// Don't create jar lib for root project, as it only contains test cases.
jar {
    jar {
        onlyIf { false }
    }
}
// Skip install task as we are not creating Jar for it.
install.enabled = false

// Set project reports directory and all test reports directory.
reporting.baseDir = "$buildDir/reports"
testReportDirName = "$buildDir/reports/all-tests"

// Set jacoco version.
jacoco {
    toolVersion = "0.8.1"
}

// Task to generate code coverage report.
task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = "Generates code coverage report for the test task."
    def allProjects = subprojects.findAll()
    dependsOn(allProjects*.test)
    additionalSourceDirs = files(allProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(allProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(allProjects.sourceSets.main.output)
    executionData = files("$buildDir/jacoco/test.exec")

    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
        html.destination(file("$reporting.baseDir/coverage"))
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
    // Exclude the Corda State and Schema classes from code coverage evaluation.
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/synechron/cordapp/obligation/state/*',
                    'com/synechron/cordapp/obligation/schema/*',
                    'com/synechron/cordapp/obligation/plugin/*'
            ])
        })
    }
}
// Config tasks to be run on finalization of Test task.
test.finalizedBy(jacocoRootReport)

def rpcUsersList = [['username': "user", 'password': "us3r1", 'permissions': ["ALL"]]]
task deployNodesH2(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    signing {
        enabled false
    }

    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapps = [
                "$project.group:$project_contracts:$project.version",
                "$project.group:$project_commons:$project.version",
                "$corda_release_group:corda-finance-workflows:$corda_release_version",
                "$corda_release_group:corda-finance-contracts:$corda_release_version",
                "$corda_bn_release_group:business-networks-contracts:$corda_bn_release_version",
                "$corda_bn_release_group:business-networks-workflows:$corda_bn_release_version"
                /*"$project.group:cordapp-monitoring:$project.version"*/
        ]
        rpcUsers = rpcUsersList
    }

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10002
        rpcSettings {
            useSsl false
            standAloneBroker false
            address "0.0.0.0:10003"
            adminAddress "0.0.0.0:10103"
        }
        runSchemaMigration = true
    }

    node {
        name "O=BorrowerA,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            useSsl false
            standAloneBroker false
            address "0.0.0.0:10006"
            adminAddress "0.0.0.0:10106"
        }
        runSchemaMigration = true
        cordapps = ["$project.group:$first_module:$project.version"]
    }
    node {
        name "O=LenderA,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            useSsl false
            standAloneBroker false
            address "0.0.0.0:10009"
            adminAddress "0.0.0.0:10109"
        }
        runSchemaMigration = true
        cordapps = ["$project.group:$secound_module:$project.version"]
    }
}



task dockerNodes(type: net.corda.plugins.Dockerform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapps = [
                "$corda_release_group:corda-finance-workflows:$corda_release_version",
                "$corda_release_group:corda-finance-contracts:$corda_release_version",
                "$project.group:$project_contracts:$project.version",
                "$project.group:$project_commons:$project.version"
                /*"$project.group:cordapp-monitoring:$project.version"*/
        ]
        rpcUsers = rpcUsersList
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        cordapps = []
    }
    node {
        name "O=BorrowerA,L=London,C=GB"
        cordapps = ["$project.group:$first_module:$project.version"]
    }
    node {
        name "O=LenderA,L=New York,C=US"
        cordapps = ["$project.group:$secound_module:$project.version"]
    }
}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}

task installPgsql(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.compileOnly)
    include '**/postgresql*.jar'
}